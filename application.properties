# ============================
# PostgreSQL als Datenquelle
# ============================

# Verwendung des PostgreSQL-Connectors
debezium.source.connector.class=io.debezium.connector.postgresql.PostgresConnector

# Verbindungsdaten zur PostgreSQL-Datenbank
# Hostname des Datenbankcontainers (Docker-Service-Name)
debezium.source.database.hostname=postgres
# Port der Datenbank
debezium.source.database.port=5432
# Benutzername
debezium.source.database.user=postgres
# Passwort
debezium.source.database.password=postgres
# Datenbankname
debezium.source.database.dbname=postgres

# Konfiguration für logical decoding
# PostgreSQL-Plugin für Change Data Capture
debezium.source.plugin.name=pgoutput
# Name des Replikations-Slots
debezium.source.slot.name=debezium_slot
# Prefix für generierte Topics/Event-Namen
debezium.source.topic.prefix=tutorial
# Name der Publication in der Datenbank
debezium.source.publication.name=debezium_pub
# Zu überwachende Tabelle
debezium.source.table.include.list=inventory.customers

# ========================================
# Persistenz für Offset- und Schema-Daten
# ========================================

# Lokale Speicherung der Offsets (damit Debezium weiß, wo es fortsetzen soll)
debezium.source.offset.storage.file.filename=/debezium/data/offsets.dat

# Speicherung des Schema-Verlaufs
debezium.source.schema.history.internal=io.debezium.storage.file.history.FileSchemaHistory
debezium.source.schema.history.internal.file.filename=/debezium/data/schema-history.dat

# ============================
# Redis als Zielsystem (Sink)
# ============================

# Redis-Stream als Ausgabeziel für die Change Events
debezium.sink.type=redis
# Adresse des Redis-Servers (Docker-Service-Name)
debezium.sink.redis.address=redis:6379

# Ausgabeformat der Nachrichten
# Ausgabe im JSON-Format (strukturiert, lesbar)
debezium.format.value=json
